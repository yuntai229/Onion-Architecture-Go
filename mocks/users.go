// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports/users.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	constant "onion-architecrure-go/domain/constant"
	model "onion-architecrure-go/domain/model"
	dto "onion-architecrure-go/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserApp is a mock of UserApp interface.
type MockUserApp struct {
	ctrl     *gomock.Controller
	recorder *MockUserAppMockRecorder
}

// MockUserAppMockRecorder is the mock recorder for MockUserApp.
type MockUserAppMockRecorder struct {
	mock *MockUserApp
}

// NewMockUserApp creates a new mock instance.
func NewMockUserApp(ctrl *gomock.Controller) *MockUserApp {
	mock := &MockUserApp{ctrl: ctrl}
	mock.recorder = &MockUserAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApp) EXPECT() *MockUserAppMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserApp) Login(requestId string, requestBody dto.LoginRequest) (string, *constant.ErrorMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", requestId, requestBody)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*constant.ErrorMessage)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserAppMockRecorder) Login(requestId, requestBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserApp)(nil).Login), requestId, requestBody)
}

// Signup mocks base method.
func (m *MockUserApp) Signup(requestId string, requestBody dto.SignupRequest) *constant.ErrorMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", requestId, requestBody)
	ret0, _ := ret[0].(*constant.ErrorMessage)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserAppMockRecorder) Signup(requestId, requestBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserApp)(nil).Signup), requestId, requestBody)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepo) Create(requestId string, userData model.Users) *constant.ErrorMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requestId, userData)
	ret0, _ := ret[0].(*constant.ErrorMessage)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(requestId, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), requestId, userData)
}

// GetByMail mocks base method.
func (m *MockUserRepo) GetByMail(requestId, mail string) (model.Users, *constant.ErrorMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMail", requestId, mail)
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(*constant.ErrorMessage)
	return ret0, ret1
}

// GetByMail indicates an expected call of GetByMail.
func (mr *MockUserRepoMockRecorder) GetByMail(requestId, mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMail", reflect.TypeOf((*MockUserRepo)(nil).GetByMail), requestId, mail)
}
